# This is a workflow to compile the share source without cime
name: extbuild
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-share:
    runs-on: ubuntu-latest
    env:
      CC: mpicc
      FC: mpifort
      CXX: mpicxx
      CPPFLAGS: "-I/usr/include -I/usr/local/include "
      LDFLAGS: "-L/usr/lib/x86_64-linux-gnu "
      CIME_MODEL: cesm
      CIME_MACHINE: ubuntu-latest
      # Versions of all dependencies can be updated here - these match tag names in the github repo
      ESMF_VERSION: v8.6.1
      ParallelIO_VERSION: pio2_6_2
      PFUNIT_VERSION: v4.9.0
      MPISERIAL_VERSION: MPIserial_2.5.4
    steps:
      - id: checkout-share
        uses: actions/checkout@v4
      - id: load-env
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          sudo apt-get install -y gfortran
          sudo apt-get install -y openmpi-bin libopenmpi-dev
          sudo apt-get install -y libxml2-utils
          sudo apt-get install -y netcdf-bin libnetcdf-dev libnetcdff-dev
          sudo apt-get install -y pnetcdf-bin libpnetcdf-dev
          sudo apt-get install -y libblas-dev
      - name: Checkout CIME
        uses: actions/checkout@v4
        with:
          repository: billsacks/cime
          path: cime
          ref: unit_test_additions_for_cesm_share
      - name: Checkout ccs_config
        uses: actions/checkout@v4
        with:
          repository: billsacks/ccs_config_cesm
          path: ccs_config
          ref: gfortran10_default
      - name: Cache PARALLELIO
        id: cache-PARALLELIO
        uses: actions/cache@v4
        with:
          path: pio
          key: ${{ runner.os }}-${{ env.ParallelIO_VERSION }}
      - name: Build ParallelIO
        if: steps.cache-PARALLELIO.outputs.cache-hit != 'true'
        uses: NCAR/ParallelIO/.github/actions/parallelio_cmake@9390e30e29d4ebbfbef0fc72162cacd9e8f25e4e
        with:
          parallelio_version: ${{ env.ParallelIO_VERSION }}
          enable_fortran: True
          install_prefix: ${GITHUB_WORKSPACE}/pio
      - name: Install ESMF
        uses: esmf-org/install-esmf-action@v1
        env:
          ESMF_COMPILER: gfortran
          ESMF_BOPT: g
          ESMF_COMM: openmpi
          ESMF_NETCDF: nc-config
          ESMF_PNETCDF: pnetcdf-config
          ESMF_INSTALL_PREFIX: ${GITHUB_WORKSPACE}/ESMF
          ESMF_PIO: external
          ESMF_PIO_INCLUDE: ${GITHUB_WORKSPACE}/pio/include
          ESMF_PIO_LIBPATH: ${GITHUB_WORKSPACE}/pio/lib
        with:
          version: ${{ env.ESMF_VERSION }}
          esmpy: false
          cache: true
      
      - name: Cache PFUNIT
        id: cache-pfunit
        uses: actions/cache@v4
        with:
          path: pfunit
          key: ${{ runner.os }}-${{ env.PFUNIT_VERSION }}
      - name: Checkout PFUNIT
        if: steps.cache-pfunit.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: pfunit
          ref: ${{ env.PFUNIT_VERSION }}
          repository: Goddard-Fortran-Ecosystem/pFUnit
      - name: build PFUNIT
        if: steps.cache-pfunit.outputs.cache-hit != 'true'
        run: |
          pushd pfunit
          cmake -DSKIP_MPI=YES -DSKIP_OPENMP=YES -B build
          cmake --build build 
          popd

      - name: Cache MPI-Serial
        id: cache-mpiserial
        uses: actions/cache@v4
        with:
          path: mpiserial
          key: ${{ runner.os }}-${{ env.MPISERIAL_VERSION }}
      - name: Checkout MPI-Serial
        if: steps.cache-mpiserial.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          path: mpiserial
          ref: ${{ env.MPISERIAL_VERSION }}
          repository: ESMCI/mpi-serial
      - name: Build MPI-Serial
        if: steps.cache-mpiserial.outputs.cache-hit != 'true'
        run: |
          pushd mpiserial
          ./configure
          make
          popd

      # Note that we have two steps below, which exercise different aspects of the build:
      # - The "Build SHARE" step builds share without unit tests, and only uses CIME for
      #   the sake of some CMake functions and genf90, NOT using CIME / ccs_config for
      #   machine configuration. This is useful to ensure that we can do the build in a
      #   relatively simple way, without relying on CIME-generated Macros.
      # - The "Test share" step redoes the build and runs the unit tests using
      #   run_tests.py, leveraging the Macros generated by CIME / ccs_config. So, in
      #   addition to ensuring that the unit tests pass, this step is also useful in
      #   ensuring that we can build the share code leveraging CIME-generated Macros.
      #
      # We could test more permutations of this - e.g., testing the build using
      # CIME-generated Macros without building and running the unit tests, or building and
      # running the unit tests without using the CIME-generated Macros (and for either of
      # these, we could choose to use or not use run_tests.py - though note that, if we
      # didn't use run_tests.py, we would need to generate the Macros file in a different
      # way). But for now these two combinations seem sufficient.
      - name: Build SHARE
        uses: ./.github/actions/buildshare
        with:
          esmfmkfile: $ESMFMKFILE
          cime_path: ${GITHUB_WORKSPACE}/cime
          pio_path: ${GITHUB_WORKSPACE}/pio
          src_root: ${GITHUB_WORKSPACE}
          pfunit_root: ${GITHUB_WORKSPACE}/pfunit
          cmake_flags: " -Wno-dev -DCMAKE_BUILD_TYPE=DEBUG -DWERROR=ON \
          -DCMAKE_Fortran_FLAGS=\" -g -Wall -ffree-form -ffree-line-length-none -fallow-argument-mismatch\" \
          -DCMAKE_MODULE_PATH=$ESMF_ROOT/cmake"
      - name: Test share
        run: |
          export PFUNIT_PATH=${GITHUB_WORKSPACE}/pfunit/build
          export ESMFMKFILE=$ESMFMKFILE
          export PIO_ROOT=${GITHUB_WORKSPACE}/pio
          export MPISERIAL=${GITHUB_WORKSPACE}/mpiserial
          export FFLAGS="-fallow-argument-mismatch"
          ${GITHUB_WORKSPACE}/cime/scripts/fortran_unit_testing/run_tests.py --build-dir ./unit_tests.temp --cmake-args " -DUNITTESTS=ON -DUSE_CIME_MACROS=ON"

#     the following can be used by developers to login to the github server in case of errors
#     see https://github.com/marketplace/actions/debugging-with-tmate for further details
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
      
